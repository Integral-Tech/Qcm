#pragma once
{{#models}}{{#model}}
/*
 * {{classname}}.h
 * name: {{name}}
 * schemaName: {{schemaName}}
 * classFilename: {{classFilename}}
 * classVarName: {{classVarName}}
 * dataType: {{dataType}}
 * isNullable: {{isNullable}}
 * isDeprecated: {{isDeprecated}}
 * isEnum: {{isEnum}}, isModel: {{isModel}}
 * parent: {{parent}}
 * xmlPrefix: {{xmlPrefix}}, xmlNamespace: {{xmlNamespace}}, xmlName: {{xmlName}}
 * {{description}}
 */
{{#oneOf}}{{#-first}}
#include <variant>{{/-first}}{{/oneOf}}

#include "json_helper/helper.h"
{{/model}}{{/models}}

{{#imports}}{{{import}}}
{{/imports}}

{{#models}}{{#model}}
{{#parentModel}}
#include "{{namespace}}/model/{{classname}}.h"
{{/parentModel}}

namespace {{namespace}}::model {
{{#vendorExtensions.x-has-forward-declarations}}
{{#vendorExtensions.x-forward-declarations}}{{.}}
{{/vendorExtensions.x-forward-declarations}}
{{/vendorExtensions.x-has-forward-declarations}}
{{#oneOf}}{{#-first}}
    class {{classname}}
    {
    public:
        {{classname}}() = default;
        ~{{classname}}() = default;

        /// {{classname}} members
        using VariantType = std::variant<{{#oneOf}}{{^-first}}, {{/-first}}{{{.}}}{{/oneOf}}>;

        const VariantType& getVariant() const;
        void setVariant(VariantType value);

    protected:
        VariantType m_variantValue;
    };
    extern void to_json(nlohmann::json&, const {{classname}}&);
    extern void from_json(const nlohmann::json&, {{classname}}&);
{{/-first}}{{/oneOf}}
{{^oneOf}}
{{#isEnum}}
    enum class {{classname}} {
        INVALID_VALUE_OPENAPI_GENERATED = 0,
        {{#allowableValues}}
        {{#enumVars}}
        {{#enumDescription}}
        /// <summary>
        /// {{.}}
        /// </summary>
        {{/enumDescription}}
        {{{name}}}{{^last}},{{/last}}
        {{/enumVars}}
        {{/allowableValues}}
    };
{{/isEnum}}

{{#isModel}}
    class {{classname}} {
    public:
    {{#vars}}{{#title}}
        // {{this}}{{/title}}{{#description}}
        // {{this}}{{/description}}
        {{#deprecated}}[[deprecated]] {{/deprecated}}{{{dataType}}} {{name}};
    {{/vars}}

        {{classname}}();
        ~{{classname}}();
    };
    extern void to_json(nlohmann::json&, const {{classname}}&);
    extern void from_json(const nlohmann::json&, {{classname}}&);
{{/isModel}}
{{/oneOf}}
} // namespace {{namespace}}::model
{{#isModel}}
DECLARE_CONVERT(std::string, {{namespace}}::model::{{classname}});
{{/isModel}}
{{#isEnum}}
DECLARE_CONVERT(std::string, {{namespace}}::model::{{classname}});
{{/isEnum}}
{{/model}}{{/models}}