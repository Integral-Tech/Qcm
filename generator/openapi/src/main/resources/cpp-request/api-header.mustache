#pragma once
{{#operations}}/*
 * {{classname}}.h
 *
 * {{description}}
 */

#include <optional>
#include <core/str_helper.h>
#include <core/strv_helper.h>
#include "{{namespace}}/type.h"
{{{defaultInclude}}}

// {{^hasModelImport}}#include "{{packageName}}/ModelBase.h"{{/hasModelImport}}
{{#imports}}{{{import}}}
{{/imports}}

namespace {{namespace}} {
namespace model
{
{{#operation}}
using return_type_{{operationId}} = {{{returnType}}}{{^returnType}}std::nullptr_t{{/returnType}};
{{/operation}}
}

namespace api::param 
{
{{#operation}}
struct {{operationId}} {
    {{#allParams}}
    {{^required}}std::optional<{{/required}}{{{dataType}}}{{^required}}>{{/required}} {{^isBodyParam}}{{paramName}}{{/isBodyParam}}{{#isBodyParam}}body{{/isBodyParam}}; // {{description}}
    {{/allParams}}
};
{{/operation}}
}

namespace api 
{
{{#operation}}
// {{summary}}
struct {{operationId}} {
public:
    using in_type                      = param::{{operationId}};
    using out_type                     = model::return_type_{{operationId}};
    constexpr static Operation  oper   = Operation::{{httpMethod}};
    auto path() const { 
        {{^hasPathParams}}
        return "{{path}}"sv; 
        {{/hasPathParams}}
        {{#hasPathParams}}
        return fmt::format("{{path}}"sv,
        {{#pathParams}}
            input.{{{paramName}}}{{^-last}},{{/-last}}
        {{/pathParams}}
        );
        {{/hasPathParams}}
    }

    auto query() const -> UrlParams {
        UrlParams p;
        {{#queryParams}}
        {{^required}}if(input.{{paramName}})
            {{/required}}p.set_param("{{paramName}}", {{^isMap}}{{^isArray}}convert_from<std::string>({{/isArray}}{{/isMap}}input.{{paramName}}{{^required}}.value(){{/required}}{{^isMap}}{{^isArray}}){{/isArray}}{{/isMap}});
        {{/queryParams}}
        return p;
    }
    auto body() const -> std::string { 
        std::string out;
        {{#bodyParam}}
        {{^required}}if(input.body)
            {{/required}}out = format_param(input.body{{^required}}.value(){{/required}});
        {{/bodyParam}}
        return out; 
    }
    in_type input;

/*
 * returnType: {{returnType}}
 * returnFormat: {{returnFormat}}
 * returnBaseType: {{returnBaseType}}
 * returnContainer: {{returnContainer}}
 * baseName: {{baseName}}
 * defaultResponse: {{defaultResponse}}
 */
};
{{/operation}}
}
}
{{/operations}}